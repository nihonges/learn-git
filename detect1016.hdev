<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.1" halcon_version="17.12">
<procedure name="main">
<interface/>
<body>
<c>*second</c>
<l>* dev_close_window ()</l>
<l>* set_system ('parallelize_operators', 'false')</l>
<l>set_system ('parallelize_operators', 'true')</l>
<l>dev_update_off ()</l>
<l>get_system ('processor_num', Cores)</l>
<l>MaxNumberOfSubthreads := 20</l>
<l>MaxThreads := min([Cores,MaxNumberOfSubthreads])</l>
<c></c>
<l>read_image (Image,'C:/Users/nihon/Desktop/fehlstelle/firma/03-06-25_300dpi_bidirectional0-0.tif')</l>
<l>* read_image (Image,'C:/Arbeit/Pool/03-06-25_300dpi_bidirectional0-0.tif')</l>
<l>* read_image (Image,'C:/Arbeit/Pool/04-06-25_randgebrochen_bckwrd_300dpi.tif')</l>
<l>* zoom_image_factor (Image, Image, 4, 4, 'constant')</l>
<l>rgb1_to_gray (Image, GrayImageo)</l>
<l>* emphasize (GrayImageo, GrayImageo, 5, 5, 7)</l>
<l>* mult_image (GrayImageo, GrayImageo, ImageResult, 1, 100)</l>
<c></c>
<l>get_image_size (GrayImageo, Width_ori, Height_ori)</l>
<l>gen_empty_obj (Images)</l>
<l>gen_empty_obj (Tiles)</l>
<l>gen_empty_obj (TilesLines)</l>
<l>gen_empty_obj (FCircles)</l>
<l>gen_empty_obj (NewContCircleBlock)</l>
<c></c>
<l>randNum := 60.0</l>
<l>thre := 50.0</l>
<l>j := 0</l>
<l>NumCols := 2</l>
<l>NumRows := 2</l>
<l>PartWidth  := int(Width_ori / NumCols)</l>
<l>PartHeight := int(Height_ori / NumRows)</l>
<l>LastPartWidth  := Width_ori  - PartWidth * (NumCols-1)</l>
<l>LastPartHeight := Height_ori - PartHeight * (NumRows-1)</l>
<c></c>
<c>*test</c>
<l>* Runs := 10</l>
<l>* set_system ('parallelize_operators', 'false')</l>
<l>* set_system ('parallelize_operators', 'true')</l>
<l>* count_seconds (T1)</l>
<l>* for Run := 1 to Runs by 1</l>
<l>*     optimize_rft_speed (PartWidth, PartHeight, 'standard')</l>
<l>*     Sigma1 := 10.0</l>
<l>*     Sigma2 := 2.0</l>
<c>    </c>
<l>*     gen_gauss_filter (GaussFilter1, Sigma1, Sigma1, 0, 'none', 'rft', PartWidth, PartHeight)</l>
<l>*     gen_gauss_filter (GaussFilter2, Sigma2, Sigma2, 0, 'none', 'rft', PartWidth, PartHeight)</l>
<l>*     sub_image (GaussFilter1, GaussFilter2, Filter, 1, 0)</l>
<c>    </c>
<l>*     crop_part (GrayImageo, Part,0, 0, PartWidth, PartHeight)</l>
<l>*     invert_image (Part, ImageInvert)</l>
<l>*     rft_generic (ImageInvert, ImageFFT, 'to_freq', 'sqrt', 'complex', PartWidth)</l>
<l>*     convol_fft (ImageFFT, Filter, ImageConvol)</l>
<l>*     rft_generic (ImageConvol, ImageFiltered, 'from_freq', 'n', 'real', PartWidth)</l>
<l>*     threshold (ImageFiltered, RegionRft, -0.002, -0.0003)</l>
<c>    </c>
<l>*     connection (RegionRft, ConnectedRegionsRft)</l>
<l>*     dilation_circle (ConnectedRegionsRft, RegionDilation, 3)</l>
<c>    </c>
<l>*     fill_up (RegionDilation, RegionFillUp)</l>
<l>*     select_shape (RegionDilation, SelectedRegions, 'area', 'and', 200, 5000)</l>
<c>    </c>
<l>*     gen_contour_region_xld (SelectedRegions, Contours, 'border')</l>
<l>*     fit_circle_contour_xld (Contours, 'atukey', -1, 2, 0, 5, 2, RowC, ColumnC, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>*     gen_circle_contour_xld (ContCircle, RowC, ColumnC, Radius+20, 0, 6.28318, 'positive', 1)</l>
<c>    </c>
<l>*     dev_display (Part)</l>
<l>*     dev_display (ContCircle)</l>
<c>    </c>
<l>* endfor</l>
<l>* count_seconds (T2)</l>
<l>* TimesSeq := gen_tuple_const(MaxThreads,1000 * (T2 - T1) / Runs)</l>
<c>*test</c>
<c></c>
<l>optimize_rft_speed (PartWidth, PartHeight, 'standard')</l>
<l>Sigma1 := 10.0</l>
<l>Sigma2 := 3.0</l>
<c></c>
<l>gen_gauss_filter (GaussFilter1, Sigma1, Sigma1, 0, 'none', 'rft', PartWidth, PartHeight)</l>
<l>gen_gauss_filter (GaussFilter2, Sigma2, Sigma2, 0, 'none', 'rft', PartWidth, PartHeight)</l>
<l>sub_image (GaussFilter1, GaussFilter2, Filter, 1, 0)</l>
<c></c>
<l>for RowIndex := 0 to NumRows-1 by 1</l>
<l>    for ColIndex := 0 to NumCols-1 by 1</l>
<l>        Row := RowIndex * PartHeight</l>
<l>        Col := ColIndex * PartWidth</l>
<c>        </c>
<c>        *(y,x)-&gt;x width, y height</c>
<l>        crop_part (GrayImageo, Part, Row, Col, PartWidth, PartHeight)</l>
<c></c>
<c>        *rft find block</c>
<l>        invert_image (Part, ImageInvert)</l>
<c>        </c>
<c>        *</c>
<c>        </c>
<l>*         threshold (ImageInvert, RegionRft, 100, 255)</l>
<l>*         connection (RegionRft, ConnectedRegionsRft)</l>
<l>*         dilation_circle (ConnectedRegionsRft, ImageInvertDilation, 3)</l>
<l>*         select_shape (ImageInvertDilation, x, 'area', 'and', 150, 5000)</l>
<c>        *</c>
<l>        rft_generic (ImageInvert, ImageFFT, 'to_freq', 'sqrt', 'complex', PartWidth)</l>
<l>        convol_fft (ImageFFT, Filter, ImageConvol)</l>
<l>        rft_generic (ImageConvol, ImageFiltered, 'from_freq', 'n', 'real', PartWidth) </l>
<c>        </c>
<l>*         median_image (ImageFiltered, ImageMedian, 'circle', 20, 'mirrored')</l>
<l>*         smooth_image (ImageMedian, ImageSmooth, 'gauss', 5)</l>
<c>        </c>
<c>        *</c>
<l>        gray_range_rect (ImageFiltered, ImageResult1, 40, 30)</l>
<l>*         equ_histo_image (ImageFiltered, ImageEquHisto)</l>
<l>        min_max_gray (ImageResult1, ImageResult1, 0, Min, Max, Range)</l>
<l>        threshold (ImageResult1, RegionDynThresh, Max * 0.7, 255)</l>
<l>*         mult_image (ImageFiltered, ImageFiltered, ImageResult, 10, 100)</l>
<c>        *</c>
<c>        </c>
<l>*         threshold (ImageFiltered, RegionRft, -0.002, -0.0003)</l>
<c>        </c>
<l>        connection (RegionDynThresh, ConnectedRegionsRft)</l>
<l>        dilation_circle (ConnectedRegionsRft, RegionDilation, 3)</l>
<c>        </c>
<l>        fill_up (RegionDilation, RegionFillUp)</l>
<l>        select_shape (RegionDilation, SelectedRegions, 'area', 'and', 200, 5000)</l>
<c>        </c>
<l>        gen_contour_region_xld (SelectedRegions, Contours, 'border')</l>
<l>        fit_circle_contour_xld (Contours, 'atukey', -1, 2, 0, 5, 2, RowC, ColumnC, Radius, StartPhi, EndPhi, PointOrder)</l>
<l>        gen_circle_contour_xld (ContCircleBlock, RowC, ColumnC, Radius+20, 0, 6.28318, 'positive', 1)</l>
<c>        </c>
<l>        dev_display (Part)</l>
<l>        dev_display (ContCircleBlock)</l>
<l>*         stop()</l>
<c>        </c>
<c>        </c>
<c>        ***************</c>
<c>        * lines gauss find lines</c>
<l>        get_image_size (Part, Width, Height)</l>
<l>        count_obj (Contours, Number)</l>
<l>        for cir := 1 to Number by 1</l>
<l>            select_obj(ContCircleBlock, circle, cir)</l>
<l>            gen_region_contour_xld(circle, circleRegion, 'filled')</l>
<l>            reduce_domain (Part, circleRegion, ImageReduced)</l>
<l>*             mean_image(ImageReduced,Mean,20,20)</l>
<l>*             dyn_threshold (ImageReduced, Mean, RegionDynThresh1, 5, 'dark')</l>
<l>            calculate_lines_gauss_parameters (2, [25,5], Sigma, Low, High)</l>
<l>            lines_gauss (ImageReduced, Lines, Sigma, Low, High, 'dark', 'true', 'gaussian', 'true')</l>
<c>        </c>
<c>        </c>
<l>*         calculate_lines_gauss_parameters (2, [25,5], Sigma, Low, High)</l>
<l>*         lines_gauss (ImageReduced, Lines, Sigma, Low, High, 'dark', 'true', 'gaussian', 'true')</l>
<l>*         lines_gauss (Part, Lines, Sigma, Low, High, 'dark', 'true', 'gaussian', 'true')</l>
<c>        *</c>
<l>            count_obj(Lines, Num)</l>
<l>            if (Num==0)</l>
<l>                select_obj(ContCircleBlock, Obj, cir)</l>
<l>                concat_obj(NewContCircleBlock, Obj, NewContCircleBlock)</l>
<l>*                 continue</l>
<l>            else</l>
<l>                select_contours_xld (Lines, SelectedContours, 'contour_length', 0, 40, 0, 0)</l>
<l>                count_obj (SelectedContours, n)</l>
<l>                if (n==0)</l>
<l>                    select_obj(ContCircleBlock, Obj, cir)</l>
<l>                    concat_obj(NewContCircleBlock, Obj, NewContCircleBlock)</l>
<l>                else</l>
<l>                    continue</l>
<l>                endif</l>
<l>            endif</l>
<l>*             d := -0.1</l>
<l>*             my_array := []</l>
<l>*             for i := 0 to Num - 1 by 1</l>
<l>*                 y_array := [my_array, d]</l>
<l>*                 x_array := [my_array, d]</l>
<l>*                 area_array := [my_array, d]</l>
<c>                </c>
<l>*                 yObj_array := [my_array, d]</l>
<l>*                 xObj_array := [my_array, d]</l>
<l>*                 areaObj_array := [my_array, d]</l>
<l>*             endfor</l>
<l>*             for Index := 1 to Num by 1</l>
<l>*                 select_obj(Lines, SingleXLD, Index)</l>
<l>*                 get_contour_xld(SingleXLD, xRows, xColumns)</l>
<l>*                 tuple_mean(xRows, CenterY)</l>
<l>*                 tuple_mean(xColumns, CenterX)</l>
<l>*                 x_array[Index-1] := CenterX</l>
<l>*                 y_array[Index-1] := CenterY</l>
<c>    </c>
<l>*                 length_xld(SingleXLD, Length)</l>
<l>*                 gen_region_contour_xld(SingleXLD, xldRegion, 'filled')</l>
<l>*                 area_center(xldRegion, Area, xRow, xColumn)</l>
<l>*                 x_array[Index-1] := xColumn</l>
<l>*                 y_array[Index-1] := xRow</l>
<l>*                 area_array[Index-1] := Area</l>
<l>*                 if (Area &gt; thre)</l>
<l>*                     yObj_array[j] := xRow</l>
<l>*                     xObj_array[j] := xColumn</l>
<l>*                     areaObj_array[j] := Area</l>
<l>*                     dev_set_draw ('margin')</l>
<l>*                     gen_circle(CircleRegion, xRow, xColumn, 15)</l>
<l>*                     j := j + 1</l>
<l>*                 endif</l>
<l>*             endfor</l>
<c>            *here</c>
<l>            hom_mat2d_identity (HomMat2D)</l>
<l>            hom_mat2d_translate (HomMat2D, Row, Col, HomMat2DTrans)</l>
<l>            affine_trans_contour_xld (Lines, LinesGlobal, HomMat2DTrans)</l>
<l>*             affine_trans_contour_xld (ContCircleBlock, CircleGlobal, HomMat2DTrans)</l>
<l>            affine_trans_contour_xld (Obj, CircleGlobal, HomMat2DTrans)</l>
<c>    </c>
<c>            *</c>
<l>            concat_obj (FCircles, CircleGlobal, FCircles)</l>
<l>            concat_obj (TilesLines, LinesGlobal, TilesLines)</l>
<l>            concat_obj (Images, Part, Images)</l>
<l>*             FileName := 'part_' + RowIndex$'d' + '_' + ColIndex$'d' + '.tif'</l>
<l>*             write_image (Part, 'tiff', 0, FileName)</l>
<l>        endfor</l>
<l>    endfor</l>
<l>endfor</l>
<l>dev_display (GrayImageo)</l>
<l>dev_set_color ('red')</l>
<l>dev_display (TilesLines)</l>
<l>* stop()</l>
<l>gen_region_contour_xld (TilesLines, TilesRegion, 'filled')</l>
<l>gen_contour_region_xld (TilesRegion, Contours, 'border')</l>
<l>smallest_circle (TilesRegion, Row, Column, Radius)</l>
<l>* gen_circle_contour_xld (ContCircle, Row, Column, Radius+10, 0, 6.28318, 'positive', 1)</l>
<l>dev_display (Image)</l>
<l>dev_set_color ('green')</l>
<l>dev_display (FCircles)</l>
<l>stop()</l>
<c>*</c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
</hdevelop>
